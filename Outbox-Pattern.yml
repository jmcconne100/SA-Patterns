AWSTemplateFormatVersion: '2010-09-09'
Description: DynamoDB Outbox Pattern with Debug Rule for EventBridge

Resources:

  #################################
  # DynamoDB Table + Stream
  #################################
  UserEventsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "outbox-pattern-user-events-jon"
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  #################################
  # Lambda Role with Stream + Events Permissions
  #################################
  OutboxLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: OutboxLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                  - events:PutEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeStream
                  - dynamodb:ListStreams
                Resource: !GetAtt UserEventsTable.StreamArn

  #################################
  # Lambda: DynamoDB Stream â†’ EventBridge
  #################################
  StreamToEventBridgeLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt OutboxLambdaRole.Arn
      Timeout: 10
      Environment:
        Variables:
          EVENT_BUS_NAME: "default"
      Code:
        ZipFile: |
          import json, boto3, os

          eb = boto3.client('events')

          def handler(event, context):
              entries = []
              for record in event['Records']:
                  if record['eventName'] != 'INSERT':
                      continue
                  new_image = record['dynamodb']['NewImage']
                  item = {k: list(v.values())[0] for k, v in new_image.items()}
                  entries.append({
                      'Source': 'app.dynamodb',
                      'DetailType': item.get('event_type', 'Unknown'),
                      'Detail': json.dumps(item),
                      'EventBusName': os.environ['EVENT_BUS_NAME']
                  })
              if entries:
                  eb.put_events(Entries=entries)
              return {"status": "processed", "events": len(entries)}

  #################################
  # Stream to Lambda Mapping
  #################################
  StreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt UserEventsTable.StreamArn
      FunctionName: !Ref StreamToEventBridgeLambda
      StartingPosition: LATEST
      BatchSize: 5

  #################################
  # Debug Lambda to receive EventBridge events
  #################################
  DebugLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt OutboxLambdaRole.Arn
      Timeout: 10
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              print("ðŸ“¦ Event received:", event)

  #################################
  # EventBridge Rule for app.dynamodb events
  #################################
  DebugEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-DebugEventRule"
      EventPattern:
        source:
          - "app.dynamodb"
      Targets:
        - Arn: !GetAtt DebugLambda.Arn
          Id: "DebugLambdaTarget"

  #################################
  # Permission for EventBridge to invoke Debug Lambda
  #################################
  DebugLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DebugLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt DebugEventRule.Arn

Outputs:
  TableName:
    Value: !Ref UserEventsTable
    Description: DynamoDB table receiving event records

  EventPublisherLambda:
    Value: !Ref StreamToEventBridgeLambda

  DebugLambda:
    Value: !Ref DebugLambda
    Description: Debug Lambda that prints incoming EventBridge events

  EventRule:
    Value: !Ref DebugEventRule
    Description: EventBridge rule matching app.dynamodb events
