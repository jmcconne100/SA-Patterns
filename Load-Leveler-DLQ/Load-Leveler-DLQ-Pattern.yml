AWSTemplateFormatVersion: '2010-09-09'
Description: Queue-Based Load Leveling with DLQ and automatic environment injection

Resources:

  #############################
  # Output Bucket
  #############################
  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "output-bucket-qbll-dlq"

  #############################
  # Dead Letter Queue
  #############################
  DeadLetterQueue:
    Type: AWS::SQS::Queue

  #############################
  # Primary Processing Queue
  #############################
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 2  # Retry 2x before sending to DLQ

  #############################
  # IAM Role for Lambdas
  #############################
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - s3:PutObject
                Resource: "*"

  #############################
  # Publisher Lambda
  #############################
  PublisherLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          QUEUE_URL: !Ref ProcessingQueue
      Code:
        ZipFile: |
          import boto3, json, os, random

          def handler(event, context):
              sqs = boto3.client('sqs')
              queue_url = os.environ['QUEUE_URL']

              message = {
                  "id": random.randint(1000, 9999),
                  "text": "hello from publisher"
              }

              sqs.send_message(
                  QueueUrl=queue_url,
                  MessageBody=json.dumps(message)
              )

              return {"status": "sent", "msg": message}

  #############################
  # Consumer Lambda
  #############################
  ConsumerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Environment:
        Variables:
          BUCKET: !Ref OutputBucket
      Code:
        ZipFile: |
          import json, os, boto3
          s3 = boto3.client('s3')

          def handler(event, context):
              for record in event['Records']:
                  body = json.loads(record['body'])

                  # Simulate failure for odd IDs
                  if int(body['id']) % 2 != 0:
                      raise Exception("Simulated processing failure")

                  s3.put_object(
                      Bucket=os.environ['BUCKET'],
                      Key=f"message-{body['id']}.json",
                      Body=json.dumps(body)
                  )

  #############################
  # Event Source Mapping (SQS â†’ Lambda)
  #############################
  ConsumerQueueMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt ProcessingQueue.Arn
      FunctionName: !Ref ConsumerLambda
      BatchSize: 1

Outputs:
  ProcessingQueueUrl:
    Description: Queue URL used internally by publisher Lambda
    Value: !Ref ProcessingQueue

  PublisherLambda:
    Description: Name of the Lambda function you can trigger to simulate load
    Value: !Ref PublisherLambda

  OutputBucket:
    Description: S3 bucket where successful messages are written
    Value: !Ref OutputBucket
