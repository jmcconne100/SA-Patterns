AWSTemplateFormatVersion: '2010-09-09'
Resources:

  # SNS Topic
  FanoutSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: fanout-topic

  # SQS Queues
  MetadataQueue:
    Type: AWS::SQS::Queue

  NotifierQueue:
    Type: AWS::SQS::Queue

  # SNS Subscriptions
  MetadataQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref FanoutSNSTopic
      Protocol: sqs
      Endpoint: !GetAtt MetadataQueue.Arn
      RawMessageDelivery: true

  NotifierQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref FanoutSNSTopic
      Protocol: sqs
      Endpoint: !GetAtt NotifierQueue.Arn
      RawMessageDelivery: true

  # Queue Access Policy to Allow SNS to Send Messages
  MetadataQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [!Ref MetadataQueue]
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt MetadataQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FanoutSNSTopic

  NotifierQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues: [!Ref NotifierQueue]
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "sqs:SendMessage"
            Resource: !GetAtt NotifierQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref FanoutSNSTopic

  # S3 Buckets
  MetadataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "metadata-bucket-jons-account"

  NotifierBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "notifier-bucket-jons-account"

  # IAM Role for Lambdas
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaSQSS3Policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "${MetadataBucket.Arn}/*"
                  - !Sub "${NotifierBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: "*"

  # Metadata Lambda Function
  MetadataLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 10
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          s3 = boto3.client('s3')
          def handler(event, context):
              for record in event['Records']:
                  body = record['body']
                  print(f"Metadata received: {body}")
                  s3.put_object(
                      Bucket=os.environ['BUCKET_NAME'],
                      Key=f"metadata-message.json",
                      Body=body
                  )
      Environment:
        Variables:
          BUCKET_NAME: !Ref MetadataBucket

  # Notifier Lambda Function
  NotifierLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.11
      Timeout: 10
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          s3 = boto3.client('s3')
          def handler(event, context):
              for record in event['Records']:
                  body = record['body']
                  print(f"Notification received: {body}")
                  s3.put_object(
                      Bucket=os.environ['BUCKET_NAME'],
                      Key=f"notifier-message.json",
                      Body=body
                  )
      Environment:
        Variables:
          BUCKET_NAME: !Ref NotifierBucket

  # Event Source Mapping (SQS to Lambda)
  MetadataEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt MetadataQueue.Arn
      FunctionName: !Ref MetadataLambda
      BatchSize: 1

  NotifierEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt NotifierQueue.Arn
      FunctionName: !Ref NotifierLambda
      BatchSize: 1
