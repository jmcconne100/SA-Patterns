AWSTemplateFormatVersion: '2010-09-09'
Description: Lakehouse CDC Fan-Out Pattern - Bronze/Silver/Gold Architecture

Resources:

  ###############################################
  # S3 Buckets for Lakehouse Layers
  ###############################################
  BronzeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "lakehouse-bronze-${AWS::AccountId}-${AWS::Region}"

  SilverBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "lakehouse-silver-${AWS::AccountId}-${AWS::Region}"

  GoldBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "lakehouse-gold-${AWS::AccountId}-${AWS::Region}"

  ###############################################
  # EventBridge Bus
  ###############################################
  LakehouseBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: lakehouse-event-bus

  ###############################################
  # IAM Role for all Lambda Writers
  ###############################################
  LakehouseLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LakehouseLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:PutObject
                Resource: '*'

  ###############################################
  # Bronze Writer Lambda - Raw dump
  ###############################################
  BronzeLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LakehouseLambdaRole.Arn
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref BronzeBucket
      Code:
        ZipFile: |
          import boto3, os, uuid, json, datetime
          s3 = boto3.client('s3')
          def lambda_handler(event, context):
              key = f"bronze/{datetime.datetime.utcnow().isoformat()}_{uuid.uuid4().hex}.json"
              s3.put_object(
                  Bucket=os.environ['BUCKET_NAME'],
                  Key=key,
                  Body=json.dumps(event).encode('utf-8')
              )
              print("ðŸ“¥ Raw event written to", key)

  ###############################################
  # Silver Writer Lambda - Cleaned version
  ###############################################
  SilverLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LakehouseLambdaRole.Arn
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref SilverBucket
      Code:
        ZipFile: |
          import boto3, os, uuid, json, datetime
          s3 = boto3.client('s3')
          def lambda_handler(event, context):
              detail = event.get('detail', {})
              cleaned = {k: v for k, v in detail.items() if v != ""}
              key = f"silver/{datetime.datetime.utcnow().isoformat()}_{uuid.uuid4().hex}.json"
              s3.put_object(
                  Bucket=os.environ['BUCKET_NAME'],
                  Key=key,
                  Body=json.dumps(cleaned).encode('utf-8')
              )
              print("ðŸ§¼ Cleaned event written to", key)

  ###############################################
  # Gold Writer Lambda - Transformed / Aggregated
  ###############################################
  GoldLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt LakehouseLambdaRole.Arn
      Timeout: 10
      Environment:
        Variables:
          BUCKET_NAME: !Ref GoldBucket
      Code:
        ZipFile: |
          import boto3, os, uuid, json, datetime
          s3 = boto3.client('s3')
          def lambda_handler(event, context):
              detail = event.get('detail', {})
              transformed = {
                  "id": detail.get("event_id"),
                  "email": detail.get("email"),
                  "is_pro": detail.get("plan") == "pro",
                  "timestamp": detail.get("timestamp")
              }
              key = f"gold/{datetime.datetime.utcnow().isoformat()}_{uuid.uuid4().hex}.json"
              s3.put_object(
                  Bucket=os.environ['BUCKET_NAME'],
                  Key=key,
                  Body=json.dumps(transformed).encode('utf-8')
              )
              print("ðŸ¥‡ Enriched event written to", key)

  ###############################################
  # EventBridge Rules for Fan-Out
  ###############################################
  BronzeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: WriteToBronze
      EventBusName: !Ref LakehouseBus
      EventPattern:
        source: ["cdc.outbox"]
      Targets:
        - Id: BronzeTarget
          Arn: !GetAtt BronzeLambda.Arn

  SilverRule:
    Type: AWS::Events::Rule
    Properties:
      Name: WriteToSilver
      EventBusName: !Ref LakehouseBus
      EventPattern:
        source: ["cdc.outbox"]
        detail-type: ["user.updated"]
      Targets:
        - Id: SilverTarget
          Arn: !GetAtt SilverLambda.Arn

  GoldRule:
    Type: AWS::Events::Rule
    Properties:
      Name: WriteToGold
      EventBusName: !Ref LakehouseBus
      EventPattern:
        source: ["cdc.outbox"]
        detail-type: ["user.updated"]
        detail:
          plan: ["pro"]
      Targets:
        - Id: GoldTarget
          Arn: !GetAtt GoldLambda.Arn

  ###############################################
  # Permissions for EventBridge to Invoke Lambdas
  ###############################################
  BronzePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BronzeLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BronzeRule.Arn

  SilverPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SilverLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SilverRule.Arn

  GoldPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GoldLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt GoldRule.Arn

Outputs:
  EventBusName:
    Value: !Ref LakehouseBus
  BronzeBucket:
    Value: !Ref BronzeBucket
  SilverBucket:
    Value: !Ref SilverBucket
  GoldBucket:
    Value: !Ref GoldBucket
